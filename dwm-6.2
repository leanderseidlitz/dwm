/* See LICENSE file for copyright and license details. */
#include <X11/XF86keysym.h>

/* appearance */
static const unsigned int borderpx  = 3;        /* border pixel of windows */
static const unsigned int snap      = 32;       /* snap pixel */
static const unsigned int systraypinning = 0;   /* 0: sloppy systray follows selected monitor, >0: pin systray to monitor X */
static const unsigned int systrayspacing = 2;   /* systray spacing */
static const int systraypinningfailfirst = 1;   /* 1: if pinning fails, display systray on the first monitor, False: display systray on the last monitor*/
static const int showsystray        = 1;     /* 0 means no systray */static const int showbar            = 1;        /* 0 means no bar */
static const int topbar             = 1;        /* 0 means bottom bar */
static const int focusonwheel       = 0;
static const char *fonts[]          = {
	"DejaVu Sans Mono:pixelsize=20",
	"Material Design Icons:pixelsize=20",
};
static const char dmenufont[]       = "DejaVu Sans Mono:pixelsize=20";

// colors
static const char col_bg[]      = "#121212";
static const char col_bg_l[]    = "#073642";
static const char col_fg[]      = "#839496";
static const char col_fg_l[]    = "#ff0066";
static const char col_fg_d[]    = "#586e75";
static const char col_yellow[]  = "#b58900";
static const char col_orange[]  = "#cb4b16";
static const char col_red[]     = "#dc322f";
static const char col_magenta[] = "#d33682";
static const char col_violet[]  = "#6c71c4";
static const char col_blue[]    = "#268bd2";
static const char col_cyan[]    = "#2aa198";
static const char col_green[]   = "#22ff77";

static const char *colors[][3] = {
	/*                    fg          bg      border  */
	[SchemeNorm]      = { col_fg,     col_bg, col_bg_l },
	[SchemeSel]       = { col_green,  col_bg, col_fg_l },
//	[SchemeUrg]       = { col_yellow, col_bg, col_red  },
//	[SchemeEmpty]     = { col_fg_d,   col_bg, col_fg_d },
//	[SchemeOccupied]  = { col_blue,   col_bg, col_fg_l },
	/* urg in status */ { col_red,    col_bg, col_red  },
};

/* tagging */
static const char *tags[] = { "Y", "X", "C", "1", "2", "3", "4", "5", "6", "7", "8", "9" };

static const Rule rules[] = {
	/* xprop(1):
	 *	WM_CLASS(STRING) = instance, class
	 *	WM_NAME(STRING) = title
	 */
	/* class      instance    title       tags mask     isfloating   monitor */
	{ "Gimp",     NULL,       NULL,       1 << 5,       0,           -1 },
	{ "Chromium", NULL,       NULL,       1 << 1,       0,           -1 },
	{ "surf",     NULL,       NULL,       1 << 1,       0,           -1 },
	{ "mpv",      NULL,       NULL,       1 << 3,       0,           -1 },
};

void
view_adjacent(const Arg *arg)
{
	int i, curtags;
	int seltag = 0;
	Arg a;

	curtags = selmon->tagset[selmon->seltags];
	for(i = 0; i < LENGTH(tags); i++)
		if(curtags & (1 << i)){
			seltag = i;
			break;
		}

	seltag = (seltag + arg->i) % (int)LENGTH(tags);
	if(seltag < 0)
		seltag += LENGTH(tags);

	a.i = (1 << seltag);
	view(&a);
}

/* layout(s) */
static const float mfact     = 0.5;  /* factor of master area size [0.05..0.95] */
static const int nmaster     = 1;    /* number of clients in master area */
static const int resizehints = 0;    /* 1 means respect size hints in tiled resizals */

static const Layout layouts[] = {
	/* symbol     arrange function */
	{ "[]=",      tile },    /* first entry is default */
	{ "><>",      NULL },    /* no layout function means floating behavior */
	{ "[M]",      monocle },
};

/* commands */
static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon,
                                               "-fn", dmenufont,
                                               "-nb", col_bg,
                                               "-nf", col_fg,
                                               "-sb", col_bg,
                                               "-sf", col_green,
                                               NULL };
static const char *termcmd[]  = { "kitty", NULL };
static const char *lockcmd[]  = { "/usr/local/bin/lock_screen", NULL };
static const char *locksuscmd[]  = { "/usr/local/bin/lock_screen_sus", NULL };
static const char *bluetoothcmd[] = { "kitty", "bluetoothctl", NULL };
static const char *scrotcmd[] = { "/usr/local/bin/scrot_sh", NULL};
static const char *emacscmd[] = { "emacsclient", "-c", NULL };
static const char *upvol[] = { "amixer", "-D", "pulse", "sset", "Master", "5%+", NULL };
static const char *downvol[] = { "amixer", "-D", "pulse", "sset", "Master", "5%-", NULL };
static const char *mute[] = { "amixer", "-D", "pulse", "sset", "Master", "1+", "toggle", NULL };
static const char *backlightupsmolcmd[] = { "/usr/local/bin/backlight", "+25", NULL };
static const char *backlightdownsmolcmd[] = { "/usr/local/bin/backlight", "-25", NULL };
static const char *backlightuplorgecmd[] = { "/usr/local/bin/backlight", "+200", NULL };
static const char *backlightdownlorgecmd[] = { "/usr/local/bin/backlight", "-200", NULL };

/* key definitions */
#define MODKEY Mod4Mask
#define TAGKEYS(KEY,TAG) \
	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },

static Key keys[] = {
	/* modifier                     key        function        argument */
	{ MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
	{ MODKEY|ShiftMask,             XK_Return, spawn,          {.v = termcmd } },
	{ MODKEY,                       XK_b,      togglebar,      {0} },
	{ MODKEY,                       XK_f,      focusstack,     {.i = +1 } },
	{ MODKEY,                       XK_a,      focusstack,     {.i = -1 } },
	{ MODKEY,                       XK_d,      view_adjacent,  {.i = +1 } },
	{ MODKEY,                       XK_s,      view_adjacent,  {.i = -1 } },
	{ MODKEY,                       XK_comma,  incnmaster,     {.i = +1 } },
	{ MODKEY,                       XK_period, incnmaster,     {.i = -1 } },
	{ MODKEY,                       XK_h,      setmfact,       {.f = -0.05} },
	{ MODKEY,                       XK_l,      setmfact,       {.f = +0.05} },
	{ MODKEY,                       XK_Return, zoom,           {0} },
	{ MODKEY,                       XK_Tab,    view,           {0} },
	{ MODKEY|ShiftMask,             XK_q,      killclient,     {0} },
	{ MODKEY,                       XK_b,      setlayout,      {.v = &layouts[0]} },
	{ MODKEY,                       XK_v,      setlayout,      {.v = &layouts[1]} },
	{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },
	{ MODKEY,                       XK_space,  setlayout,      {0} },
	{ MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
	{ MODKEY,                       XK_0,      view,           {.ui = ~0 } },
	{ MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
	{ MODKEY,                       XK_w,      focusmon,       {.i = -1 } },
	{ MODKEY,                       XK_e,      focusmon,       {.i = +1 } },
	{ MODKEY|ShiftMask,             XK_period, tagmon,         {.i = -1 } },
	{ MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = +1 } },
	{ MODKEY|ShiftMask,             XK_b,      spawn,          {.v = bluetoothcmd } },
	{ MODKEY|ControlMask,           XK_e,      spawn,          {.v = emacscmd } },
	{ MODKEY,                       XK_i,      spawn,          {.v = lockcmd } },
	{ MODKEY|ShiftMask,             XK_i,      spawn,          {.v = locksuscmd } },
	{ MODKEY,                       XK_Print,  spawn,          {.v = scrotcmd } },
	TAGKEYS(                        XK_y,                      0)
	TAGKEYS(                        XK_x,                      1)
	TAGKEYS(                        XK_c,                      2)
	TAGKEYS(                        XK_1,                      3)
	TAGKEYS(                        XK_2,                      4)
	TAGKEYS(                        XK_3,                      5)
	TAGKEYS(                        XK_4,                      6)
	TAGKEYS(                        XK_5,                      7)
	TAGKEYS(                        XK_6,                      8)
	TAGKEYS(                        XK_7,                      9)
	TAGKEYS(                        XK_8,                      10)
	TAGKEYS(                        XK_9,                      11)
	{ MODKEY|ShiftMask,             XK_Escape, quit,           {0} },
	{ 0,              XF86XK_AudioRaiseVolume,    spawn,       {.v = upvol } },
	{ 0,              XF86XK_AudioLowerVolume,    spawn,       {.v = downvol } },
	{ 0,              XF86XK_AudioMute,           spawn,       {.v = mute } },
	{ ShiftMask,      XF86XK_MonBrightnessUp,     spawn,       {.v = backlightuplorgecmd } },
	{ ShiftMask,      XF86XK_MonBrightnessDown,   spawn,       {.v = backlightdownlorgecmd } },
	{ 0,              XF86XK_MonBrightnessUp,     spawn,       {.v = backlightupsmolcmd } },
	{ 0,              XF86XK_MonBrightnessDown,   spawn,       {.v = backlightdownsmolcmd } },

};

/* button definitions */
/* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static Button buttons[] = {
	/* click                event mask      button          function        argument */
	{ ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
	{ ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
	{ ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
	{ ClkTagBar,            0,              Button1,        view,           {0} },
	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
};


